---
description: 
globs: *.tsx,*.ts
alwaysApply: false
---
<!-- cursor-rule: enforce-tooling-config -->

**Authority Level**: Non-negotiable hard guard-rail.
# TypeScript ESLint: Human-Readable Rule List

## Unsafe/Type Safety Rules
- Do not assign values of unknown or unsafe types (`no-unsafe-assignment`).
- Do not call functions/methods on unknown or unsafe types (`no-unsafe-call`).
- Do not access properties/methods on unknown or unsafe types (`no-unsafe-member-access`).
- Do not return unknown or unsafe types from functions (`no-unsafe-return`).

## Core TypeScript Rules
- Never use the `any` type (`no-explicit-any`).
- Never declare and not use a variable or parameter (`no-unused-vars`).
- Do not use variables before they are defined (`no-use-before-define`).
- Always provide an explicit return type for exported functions and class methods (`explicit-module-boundary-types`).
- Prefer `const` over `let` or `var` where possible (`prefer-const`).
- Prefer nullish coalescing (`??`) over `||` (`prefer-nullish-coalescing`).
- Prefer optional chaining (`?.`) over manual checks (`prefer-optional-chain`).
- Disallow unused expressions (`no-unused-expressions`).
- Do not shadow variable declarations (`no-shadow`).
- Do not use `require` statements except in import statements (`no-var-requires`).
- Do not use non-null assertions after an optional chain expression (`no-non-null-asserted-optional-chain`).
- Require `await` with every promise (no floating promises) (`no-floating-promises`).

## Strictness and Safety
- Avoid implicit `any` types (`no-implicit-any`).
- Avoid using `eval()` (`no-implied-eval`).
- Avoid unbound methods that cause `this` context issues (`unbound-method`).
- Type assertions should be object-like (`consistent-type-assertions`).
- Do not add explicit type declarations where types can be inferred (`no-inferrable-types`).
- Use type-only imports/exports for types, not values (`consistent-type-imports`).
- Prefer `const enum` over regular enums (`prefer-enum-initializers`).
- Prefer function types over object types with call signatures (`prefer-function-type`).
- Prefer `includes()` over `indexOf()` for arrays (`prefer-includes`).
- Prefer string `startsWith/endsWith` over `indexOf` comparisons (`prefer-string-starts-ends-with`).
- Avoid unnecessary type arguments (`no-unnecessary-type-arguments`).
- Avoid unnecessary boolean comparisons (`no-unnecessary-boolean-literal-compare`).
- Avoid unnecessary type assertions (`no-unnecessary-type-assertion`).
- Avoid unnecessary conditionals (`no-unnecessary-condition`).
- Avoid unnecessary equality comparisons (`no-unnecessary-equality`).
- Avoid unnecessary template literals (`no-unnecessary-template-expressions`).
- Disallow useless empty exports (`no-useless-empty-export`).
- Disallow useless constructors in classes (`no-useless-constructor`).
- Do not return values from constructors (`no-constructor-return`).
- Disallow duplicate imports (`no-duplicate-imports`).
- Require default cases in switch statements (`switch-exhaustiveness-check`).
- Disallow assignment operators in conditional expressions (`no-cond-assign`).
- Do not use deprecated APIs (`deprecation`).

## Code Style & Best Practices
- Use consistent type definitions (`type` vs `interface`) (`consistent-type-definitions`).
- Use consistent member delimiter style (`member-delimiter-style`).
- Use consistent naming conventions (`naming-convention`).
- Use consistent spacing between type annotations (`type-annotation-spacing`).
- Prefer type imports for types (`consistent-type-imports`).
- Explicitly specify all function return types (`explicit-function-return-type`).
- Alphabetically sort union/intersection types (`sort-type-union-intersection-members`).
- Use a consistent index signature style (`index-signature-style`).
- Prefer using `for-of` loops (`prefer-for-of`).

---

**If any rule is violated, the code must be fixed before it can be considered complete. Use type assertions, validation libraries, or custom type guards when handling untyped or external data.**


*This rule is a hard-coded law. The LLM is not permitted to ignore, override, or reinterpret it under any circumstances.*
